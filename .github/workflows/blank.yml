# This is a basic workflow to help you get started with Actions

name: build-all

# Controls when the workflow will run
on:
  # Triggers the workflow when the "main" branch is pushed to
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# run bash for all jobs
defaults:
  run:
    shell: bash

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # 1 job
  build:
    # use a strategy matrix to run this job on multiple OS's
    strategy:
      matrix:
        include:
          # we run on windows, linux, linux-android, and macos
          - os: windows-latest
          - os: ubuntu-latest
          - os: ubuntu-latest
            android: 21
          - os: ubuntu-latest
            android: 26
          - os: macos-latest

    runs-on: ${{ matrix.os }}
    
    if: ${{ matrix.android }}
    name: build (android - api ${{ matrix.android }})
    
    #name: build (${{ matrix.os }})
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: ${{ matrix.os }} - android
        if: ${{ matrix.android }}
        run: echo ${{ matrix.os }} - ANDROID

      - name: ${{ matrix.os }}
        if: ${{ ! matrix.android }}
        run: echo ${{ matrix.os }}
    
  #     - name: uncompress docker image
  #       run: |
  #         xz -d ./ubuntu.tar.xz

  #     # - uses: actions/upload-artifact@v3
  #     #   with:
  #     #     name: ubuntu
  #     #     path: ubuntu.tar
  #     #     retention-days: 1

  # # we do not know how to persist docker containers without needing to re-initialize them
  # # build-something:
  # #   # The type of runner that the job will run on
  # #   runs-on: ubuntu-latest
  # #   needs: uncompress-docker-container

  # #   # Steps represent a sequence of tasks that will be executed as part of the job
  # #   steps:
  # #     - uses: actions/download-artifact@v3
  # #       with:
  # #         name: ubuntu

  #     - name: load docker image
  #       run: |
  #         sudo docker image load -i ./ubuntu.tar

  #     - name: create docker container
  #       run: |
  #         sudo docker container create --user ubuntu --workdir /home/ubuntu --init --tty --tmpfs /tmp --ulimit nofile=262144:262144 --name git_local_ubuntu git_local_ubuntu:23.10

  #     - name: start docker container
  #       run: |
  #         sudo docker container start git_local_ubuntu
      
  #     - name: allow ubuntu user to sudo
  #       run: |
  #         sudo docker container exec --user root git_local_ubuntu bash -c "echo 'ubuntu ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/ubuntu"


  #     - name: install clang
  #       run: |
  #         sudo docker container exec git_local_ubuntu bash -c "sudo apt install -y clang"

  #     - name: generate program
  #       run: |
  #         sudo docker container exec git_local_ubuntu bash -c "printf \"#include <stdio.h>\nint main() { printf(\\\"hello\\\\n\\\"); return 0; }\" > program.c"
  #         sudo docker container exec git_local_ubuntu bash -c "cat program.c"

  #     - name: compile program
  #       run: |
  #         sudo docker container exec git_local_ubuntu bash -c "clang program.c -O3 -g0 -o program"

  #     - name: execute program
  #       run: |
  #         sudo docker container exec git_local_ubuntu bash -c "./program"
